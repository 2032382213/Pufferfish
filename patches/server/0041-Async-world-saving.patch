From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kevin Raneri <kevin.raneri@gmail.com>
Date: Mon, 15 Jan 2024 09:59:45 -0600
Subject: [PATCH] Async world saving


diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
index 1ca25529245ed369b8705075a8c2e32fa4d9b1d1..b19ff5748941494a7bffe70a3152a0d52a35f94b 100644
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
+++ b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
@@ -196,6 +196,20 @@ public class PufferfishConfig {
 				"an attempt to maintain 20 TPS. This option (defaults to true per",
 				"spigot/paper) can cause mobs to move fast after a lag spike.");
 	}
+
+	public static boolean enableAsyncWorldSaving;
+	public static boolean asyncWorldSavingInitialized;
+	private static void asyncWorldSaving() {
+		boolean temp = getBoolean("enable-async-world-saving", false,
+				"Save world changes asynchronously. This is disabled by default as it is not",
+				"100% confident that this will not cause world corruption issues.");
+
+		// This prevents us from changing the value during a reload.
+		if (!asyncWorldSavingInitialized) {
+			asyncWorldSavingInitialized = true;
+			enableAsyncWorldSaving = temp;
+		}
+	}
 	
 	public static boolean enableSuffocationOptimization;
 	private static void suffocationOptimization() {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index f571a4a8b56a82f17b0af3ae482c7ba7ce30a0b0..c80dc73d7fd7d6cf3b87d1626129273e944d6649 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1507,7 +1507,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         try (co.aikar.timings.Timing ignored = this.timings.worldSave.startTiming()) {
             if (doFull) {
-                this.saveLevelData();
+                this.saveLevelData(true); // Pufferfish
             }
 
             this.timings.worldSaveChunks.startTiming(); // Paper
@@ -1543,7 +1543,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 progressListener.progressStartNoAbort(Component.translatable("menu.savingLevel"));
             }
 
-            this.saveLevelData();
+            this.saveLevelData(!close); // Pufferfish
             if (progressListener != null) {
                 progressListener.progressStage(Component.translatable("menu.savingChunks"));
             }
@@ -1566,12 +1566,12 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // CraftBukkit end
     }
 
-    private void saveLevelData() {
+    private void saveLevelData(boolean async) { // Pufferfish
         if (this.dragonFight != null) {
             this.serverLevelData.setEndDragonFightData(this.dragonFight.saveData()); // CraftBukkit
         }
 
-        this.getChunkSource().getDataStorage().save();
+        this.getChunkSource().getDataStorage().save(async); // Pufferfish
     }
 
     public <T extends Entity> List<? extends T> getEntities(EntityTypeTest<Entity, T> filter, Predicate<? super T> predicate) {
diff --git a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
index f2a7cb6ebed7a4b4019a09af2a025f624f6fe9c9..47636aad5fa20d1c28d3520beb0729df9b30cf6c 100644
--- a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -224,7 +224,7 @@ public class WorldUpgrader {
                 }
             }
 
-            this.overworldDataStorage.save();
+            this.overworldDataStorage.save(false); // Pufferfish
             i = Util.getMillis() - i;
             WorldUpgrader.LOGGER.info("World optimizaton finished after {} ms", i);
             this.finished = true;
diff --git a/src/main/java/net/minecraft/world/level/saveddata/SavedData.java b/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
index 697df9a9f050c0130246ce2b08a859965bddf184..6df6a6bd89979bcd728e2f5bec948437d6ff9498 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
@@ -29,17 +29,28 @@ public abstract class SavedData {
         return this.dirty;
     }
 
-    public void save(File file) {
+    public void save(File file) { save(file, false); } // Pufferfish
+    public void save(File file, boolean async) { // Pufferfish
         if (this.isDirty()) {
             CompoundTag compoundTag = new CompoundTag();
             compoundTag.put("data", this.save(new CompoundTag()));
             NbtUtils.addCurrentDataVersion(compoundTag);
 
+            // Pufferfish start
+            Runnable writeRunnable = () -> {
             try {
                 NbtIo.writeCompressed(compoundTag, file.toPath());
             } catch (IOException var4) {
                 LOGGER.error("Could not save data {}", this, var4);
             }
+            };
+
+            if (gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncWorldSaving && async) {
+                net.minecraft.Util.ioPool().execute(writeRunnable);
+            } else {
+                writeRunnable.run();
+            }
+            // Pufferfish end
 
             this.setDirty(false);
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
index d051e8c1db6b5c42b8df0be54d9d48ba0e7b0077..6488a61bb05b0f2af23c77bc6df7c3014042ec5e 100644
--- a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
@@ -118,10 +118,10 @@ public class DimensionDataStorage {
         return bl;
     }
 
-    public void save() {
+    public void save(boolean async) { // Pufferfish
         this.cache.forEach((id, state) -> {
             if (state != null) {
-                state.save(this.getDataFile(id));
+                state.save(this.getDataFile(id), async); // Pufferfish
             }
 
         });
